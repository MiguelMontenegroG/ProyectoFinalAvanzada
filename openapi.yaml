openapi: 3.1.0
info:
  title: "Plataforma de Reportes Ciudadanos"
  description: |
    API para la gestión de reportes ciudadanos sobre seguridad, emergencias e infraestructura.
    Permite a los usuarios reportar incidentes, gestionar perfiles, comentar en reportes,
    y a los administradores moderar contenido y generar informes.
  version: "1.2.0"
  contact:
    name: "Equipo de Desarrollo"
    email: "soporte@reportesciudadanos.com"

servers:
  - url: "https://api.reportesciudadanos.com/v1"
    description: "Servidor de producción"
  - url: "http://localhost:8080"
    description: "Servidor de desarrollo"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Autenticación JWT para usuarios y administradores"

  schemas:
    Usuario:
      type: object
      required:
        - id
        - nombre
        - correo
        - password
        - activo
      properties:
        id:
          type: string
          format: uuid
          description: "Identificador único del usuario"
        nombre:
          type: string
          maxLength: 100
          description: "Nombre completo del usuario"
        correo:
          type: string
          format: email
          description: "Correo electrónico válido"
        telefono:
          type: string
          pattern: '^\+?[0-9]{7,15}$'
          description: "Número de teléfono internacional"
        direccion:
          type: string
          description: "Dirección física completa"
        ciudad:
          type: string
          description: "Ciudad de residencia"
        barrio:
          type: string
          description: "Barrio o sector específico"
        fotoPerfil:
          type: string
          format: uri
          description: "URL de la imagen de perfil en Cloudinary"
        biografia:
          type: string
          maxLength: 500
          description: "Descripción personal del usuario"
        activo:
          type: boolean
          description: "Estado de la cuenta (activada/desactivada)"
        rol:
          type: string
          enum: [cliente, moderador, administrador]
          default: "cliente"
          description: "Rol del usuario en el sistema"
        password:
          type: string
          format: password
          minLength: 8
          description: "Contraseña encriptada"

    Reporte:
      type: object
      required:
        - titulo
        - descripcion
        - categoria
        - ubicacion
        - usuario_id
      properties:
        id:
          type: string
          format: uuid
          description: "Identificador único del reporte"
        titulo:
          type: string
          maxLength: 120
          description: "Título descriptivo del incidente"
        descripcion:
          type: string
          maxLength: 1000
          description: "Detalles completos del reporte"
        categoria:
          type: array
          items:
            type: string
            enum: [seguridad, emergencia_medica, infraestructura, mascotas, comunidad]
          minItems: 1
          description: "Categorías aplicables al reporte"
        prioridad:
          type: string
          enum: [baja, media, alta, urgente]
          default: "media"
          description: "Nivel de prioridad según impacto"
        ubicacion:
          type: object
          required:
            - latitud
            - longitud
          properties:
            latitud:
              type: number
              format: float
              minimum: -90
              maximum: 90
              description: "Coordenada geográfica"
            longitud:
              type: number
              format: float
              minimum: -180
              maximum: 180
            direccion:
              type: string
              description: "Dirección humana legible"
            mapa_url:
              type: string
              format: uri
              description: "URL de Mapbox para visualización"
        imagenes:
          type: array
          items:
            type: string
            format: uri
          maxItems: 5
          description: "URLs de imágenes en Cloudinary"
        estado:
          type: string
          enum: [pendiente, en_revision, verificado, rechazado, resuelto]
          default: "pendiente"
          description: "Estado actual del reporte"
        historial_estados:
          type: array
          items:
            type: object
            properties:
              estado:
                type: string
              fecha:
                type: string
                format: date-time
              motivo:
                type: string
          description: "Historial completo de cambios de estado"
        likes:
          type: integer
          minimum: 0
          description: "Total de votos 'Es importante'"
        umbral_verificacion:
          type: integer
          default: 50
          description: "Límite para verificación automática"
        usuario_id:
          type: string
          format: uuid
          description: "ID del usuario creador"
        fecha_creacion:
          type: string
          format: date-time
          description: "Fecha y hora de creación"

    Comentario:
      type: object
      required:
        - texto
        - usuario_id
        - reporte_id
      properties:
        id:
          type: string
          format: uuid
          description: "Identificador único del comentario"
        texto:
          type: string
          maxLength: 500
          description: "Contenido del comentario"
        usuario_id:
          type: string
          format: uuid
          description: "ID del autor del comentario"
        fecha_creacion:
          type: string
          format: date-time
          description: "Fecha y hora de creación"
        likes:
          type: integer
          minimum: 0
          description: "Número de likes recibidos"
        usuarios_like:
          type: array
          items:
            type: string
            format: uuid
          description: "IDs de usuarios que dieron like"

    Notificacion:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: "Identificador único de la notificación"
        tipo:
          type: string
          enum: [nuevo_reporte, cambio_estado, nuevo_comentario, alerta_zona]
          description: "Tipo de notificación"
        mensaje:
          type: string
          description: "Contenido de la notificación"
        fecha:
          type: string
          format: date-time
          description: "Fecha y hora de generación"
        leida:
          type: boolean
          default: false
          description: "Estado de lectura"
        metadata:
          type: object
          additionalProperties: true
          description: "Datos adicionales relacionados"

    MapaVisualizacion:
      type: object
      properties:
        centro:
          type: object
          properties:
            latitud:
              type: number
              format: float
              description: "Latitud del centro del mapa"
            longitud:
              type: number
              format: float
              description: "Longitud del centro del mapa"
        zoom:
          type: integer
          minimum: 1
          maximum: 20
          description: "Nivel de zoom del mapa"
        marcadores:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
                description: "ID del marcador"
              latitud:
                type: number
                format: float
                description: "Coordenada latitud"
              longitud:
                type: number
                format: float
                description: "Coordenada longitud"
              tipo:
                type: string
                enum: [reporte, casa, emergencia]
                description: "Tipo de marcador"
              info:
                type: string
                description: "Información adicional"

paths:
  # ======================
  # Autenticación
  # ======================
  /auth/registro:
    post:
      tags: [Autenticación]
      summary: Registrar nuevo usuario
      description: |
        Crea una nueva cuenta de usuario. Se enviará un código de activación al correo electrónico proporcionado.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nombre
                - correo
                - password
              properties:
                nombre:
                  type: string
                  example: "Juan Pérez"
                correo:
                  type: string
                  format: email
                  example: "juan@example.com"
                password:
                  type: string
                  format: password
                  example: "Str0ngP@ssw0rd"
      responses:
        201:
          description: Usuario registrado exitosamente
          headers:
            Location:
              description: URL para activación de cuenta
              schema:
                type: string
                format: uri
                example: "/auth/activar"
        409:
          description: El correo electrónico ya está registrado

  /auth/activar:
    post:
      tags: [Autenticación]
      summary: Activar cuenta
      description: Valida el código de activación recibido por correo electrónico
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [codigo]
              properties:
                codigo:
                  type: string
                  minLength: 6
                  maxLength: 6
                  example: "A1B2C3"
      responses:
        204:
          description: Cuenta activada exitosamente
        410:
          description: Código inválido o expirado

  /auth/login:
    post:
      tags: [Autenticación]
      summary: Iniciar sesión
      description: Autentica al usuario y devuelve un token JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [correo, password]
              properties:
                correo:
                  type: string
                  format: email
                  example: "juan@example.com"
                password:
                  type: string
                  format: password
                  example: "Str0ngP@ssw0rd"
      responses:
        200:
          description: Autenticación exitosa
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  expira:
                    type: string
                    format: date-time
                    example: "2024-03-15T12:00:00Z"
        401:
          description: Credenciales inválidas

  /auth/recuperar-contrasena:
    post:
      tags: [Autenticación]
      summary: Solicitar recuperación de contraseña
      description: Envía un código de recuperación al correo electrónico del usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [correo]
              properties:
                correo:
                  type: string
                  format: email
                  example: "juan@example.com"
      responses:
        202:
          description: Código de recuperación enviado

  /auth/cambiar-contrasena:
    post:
      tags: [Autenticación]
      summary: Cambiar contraseña
      description: Establece una nueva contraseña usando el código de recuperación
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [codigo, nuevaContrasena]
              properties:
                codigo:
                  type: string
                  example: "D4E5F6"
                nuevaContrasena:
                  type: string
                  format: password
                  example: "NewP@ssw0rd123"
      responses:
        204:
          description: Contraseña actualizada exitosamente
        400:
          description: Código inválido o expirado

  # ======================
  # Gestión de Usuarios
  # ======================
  /usuarios/{id}:
    get:
      summary: Obtener perfil de usuario
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        200:
          description: Detalles del usuario
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Usuario"
        404:
          description: Usuario no encontrado

    put:
      security: [BearerAuth: []]
      summary: Actualizar perfil
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Usuario"
      responses:
        200:
          description: Perfil actualizado exitosamente
        403:
          description: No tiene permisos para modificar este usuario

    delete:
      security: [BearerAuth: []]
      summary: Desactivar cuenta
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Cuenta desactivada exitosamente
        403:
          description: Operación no permitida

  # ======================
  # Gestión de Reportes
  # ======================
  /reportes:
    post:
      security: [BearerAuth: []]
      summary: Crear nuevo reporte
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reporte"
      responses:
        201:
          description: Reporte creado exitosamente
          headers:
            Location:
              description: URL del nuevo reporte
              schema:
                type: string
                format: uri
                example: "/reportes/550e8400-e29b-41d4-a716-446655440000"
        422:
          description: Datos geográficos inválidos

    get:
      summary: Listar reportes
      parameters:
        - name: categoria
          in: query
          schema:
            type: string
          description: Filtrar por categoría
        - name: estado
          in: query
          schema:
            type: string
            enum: [pendiente, en_revision, verificado, rechazado, resuelto]
        - name: prioridad
          in: query
          schema:
            type: string
            enum: [baja, media, alta, urgente]
        - name: radio
          in: query
          schema:
            type: number
            minimum: 0.1
            maximum: 50
          description: Radio en kilómetros desde las coordenadas
        - name: latitud
          in: query
          schema:
            type: number
            format: float
        - name: longitud
          in: query
          schema:
            type: number
            format: float
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        200:
          description: Lista de reportes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Reporte"

  /reportes/{id}:
    get:
      summary: Obtener detalles de reporte
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Detalles del reporte
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reporte"
        404:
          description: Reporte no encontrado

    patch:
      security: [BearerAuth: []]
      summary: Actualizar reporte
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reporte"
      responses:
        200:
          description: Reporte actualizado
        403:
          description: No es el propietario del reporte

    delete:
      security: [BearerAuth: []]
      summary: Eliminar reporte
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Reporte eliminado
        403:
          description: Requiere rol de administrador

    # ======================
  # Interacciones
  # ======================
  /reportes/{id}/likes:
    post:
      security: [BearerAuth: []]
      summary: Dar like a reporte
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        201:
          description: Like registrado exitosamente
        409:
          description: El usuario ya dio like previamente

  /reportes/{id}/comentarios:
    get:
      summary: Listar comentarios del reporte
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: orden
          in: query
          schema:
            type: string
            enum: [recientes, antiguos, populares]
            default: "recientes"
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        200:
          description: Lista de comentarios paginada
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Comentario"
                  paginacion:
                    type: object
                    properties:
                      total:
                        type: integer
                      paginas:
                        type: integer
                      actual:
                        type: integer

    post:
      security: [BearerAuth: []]
      summary: Crear nuevo comentario
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [texto]
              properties:
                texto:
                  type: string
                  maxLength: 500
                  example: "Necesitamos más atención en este caso"
                parentId:
                  type: string
                  format: uuid
                  description: "ID para comentarios anidados"
      responses:
        201:
          description: Comentario creado exitosamente
          headers:
            Location:
              schema:
                type: string
                format: uri
                example: "/comentarios/550e8400-e29b-41d4-a716-446655440000"
        403:
          description: Usuario no autorizado o reporte cerrado

  /comentarios/{id}:
    patch:
      security: [BearerAuth: []]
      summary: Actualizar comentario
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                texto:
                  type: string
                  maxLength: 500
      responses:
        200:
          description: Comentario actualizado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comentario"
        403:
          description: Solo el autor puede modificar

    delete:
      security: [BearerAuth: []]
      summary: Eliminar comentario
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Comentario eliminado
        403:
          description: Requiere permisos de moderador

  /comentarios/{id}/likes:
    post:
      security: [BearerAuth: []]
      summary: Dar like a comentario
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        201:
          description: Like registrado
        409:
          description: Like ya existente

  # ======================
  # Moderación
  # ======================
  /admin/reportes/{id}/estado:
    patch:
      security: [BearerAuth: []]
      summary: Cambiar estado de reporte (Admin)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [estado, motivo]
              properties:
                estado:
                  type: string
                  enum: [en_revision, verificado, rechazado, resuelto]
                motivo:
                  type: string
                  maxLength: 200
      responses:
        200:
          description: Estado actualizado
        403:
          description: Requiere rol de administrador

  # ======================
  # Notificaciones
  # ======================
  /notificaciones:
    get:
      security: [BearerAuth: []]
      summary: Obtener notificaciones del usuario
      parameters:
        - name: leidas
          in: query
          schema:
            type: boolean
        - name: tipo
          in: query
          schema:
            type: string
            enum: [nuevo_reporte, cambio_estado, nuevo_comentario, alerta_zona]
      responses:
        200:
          description: Lista de notificaciones
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notificacion"

  # ======================
  # Analytics
  # ======================
  /analytics/reportes:
    get:
      security: [BearerAuth: []]
      summary: Generar reportes estadísticos
      parameters:
        - name: metricas
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
              enum: [categorias, estados, historial, tendencias]
        - name: fecha_inicio
          in: query
          schema:
            type: string
            format: date
        - name: fecha_fin
          in: query
          schema:
            type: string
            format: date
      responses:
        200:
          description: Datos estadísticos
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true